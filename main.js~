/**
 * Created by Manu Masson on 6/27/2017.
 *
 */

'use strict';

console.log('Starting app...');

const request = require('request'), Promise = require("bluebird"); //request for pulling JSON from api. Bluebird for Promises.
var ccxt = require ('ccxt')
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
const TOKEN = {
  AVT: "983677e33d3420776b14e2226a5dfd3fd7900a62b6fb648879797cfd4040721e/orders/0x0d88ed6e74bbfd96b831231638b66c05571e824f/0",
  EVX: "1f69737fdb7c130ae81bee716dc70d686f9f2bfb4712a1b9cc5ac5c9bc4def72/orders/0xf3db5fa2c66b7af3eb0c0b782510816cbe4813b8/0",
  COSS: "784291f69b6c2e314fd952f103aea37fdb5150494cc83b1fd51c09696b80c21f/orders/0x65292eeadf1426cd2df1c4793a3d7519f253913b/0",
  OMG: "8ab5add6018edf01f0ef037b28e28c60ac41fef76f306cbbd565dffdb51a7488/orders/0xd26114cd6ee289accf82350c8d8487fedb8a0c07/0",
  AVT: "983677e33d3420776b14e2226a5dfd3fd7900a62b6fb648879797cfd4040721e/orders/0x0d88ed6e74bbfd96b831231638b66c05571e824f/0",
  AVT: "983677e33d3420776b14e2226a5dfd3fd7900a62b6fb648879797cfd4040721e/orders/0x0d88ed6e74bbfd96b831231638b66c05571e824f/0",
  AVT: "983677e33d3420776b14e2226a5dfd3fd7900a62b6fb648879797cfd4040721e/orders/0x0d88ed6e74bbfd96b831231638b66c05571e824f/0"
};

const gulp = require('gulp');
const xmlTransformer = require("gulp-xml-transformer");




const express = require('express'),
    app = express(),
    helmet = require('helmet'),
    http = require('http').Server(app),
    io = require('socket.io')(http); // For websocket server functionality


var ccxtPolo = new ccxt.poloniex();
var ccxtBittrex = new ccxt.bittrex();
var ccxtLiqui = new ccxt.liqui();
var ccxtBinance = new ccxt.binance();
var ccxtCryptopia = new ccxt.cryptopia();
app.use(helmet.hidePoweredBy({setTo: 'PHP/5.4.0'}));

const port = process.env.PORT || 3000;



app.use(express.static(__dirname + '/docs'));

http.listen(port, function () {
    console.log('listening on', port);
});


require('./settings.js')(); //Includes settings file.
// let db = require('./db.js'); //Includes db.js


let coinNames = [];
io.on('connection', function (socket) {
    socket.emit('coinsAndMarkets', [marketNames, coinNames]);
    socket.emit('results', results);
});

// coin_prices is an object with data on price differences between markets. = {BTC : {market1 : 2000, market2: 4000, p : 2}, } (P for percentage difference)
// results is a 2D array with coin name and percentage difference, sorted from low to high.
let coin_prices = {}, numberOfRequests = 0, results = []; // GLOBAL variables to get pushed to browser.


function getDeltaOrders(symbol)
{

      try {
            //console.log("test1");

            var xhr = new XMLHttpRequest();
            xhr.ontimeout = function () {
                console.error("The request for " + " timed out.");
            };

            console.log(symbol);
            var orders = [];


            var link = TOKEN["AVT"];

            console.log(link);
            xhr.open("GET", 'https://cache.etherdelta.com/nonce/' + link, false);
            xhr.onload = function(response) {
              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  var dataResponse1 = JSON.parse(xhr.responseText);
                  //console.log(xhr.responseText);

                  return dataResponse1;
                } else {
                    console.error(xhr.statusText);
                }
              }
            };
            xhr.send(null);
      } catch (error) {
            console.log("Error :" + error); //Throws error
        return null;
      }
}

function getMarketData(options, coin_prices, callback) {   //GET JSON DATA
    return new Promise(function (resolve, reject) {
        request(options.URL, function (error, response, body) {
            try {
                let data = JSON.parse(body);
                console.log("Success", options.marketName);
                if (options.marketName) {
                    //console.log(data);
                    let newCoinPrices = options.last(data, coin_prices, options.toBTCURL);
                    numberOfRequests++;
                    if (numberOfRequests >= 1) computePrices(coin_prices);
                    resolve(newCoinPrices);
                }
                else {
                    resolve(data);
                }

            } catch (error) {
                console.log("Error getting JSON response from", options.URL, error); //Throws error
                reject(error);
            }

        });


    });
}

async function computePrices(data) {
    results = [];

    function loopData() {
        return new Promise(function (resolve, reject) {

            if (numberOfRequests >= 2) {

                for (let coin in data) {
                  if (coin != "NET" && coin != "BTM" && coin != "ELC" && coin != "HSR")
                    if (Object.keys(data[coin]).length > 1) {
                        if (coinNames.includes(coin) == false) coinNames.push(coin);
                        let arr = [];
                        for (let market in data[coin]) {
                            arr.push([data[coin][market], market]);

                        }
                        arr.sort(function (a, b) {
                            return a[0] - b[0];
                        });
                        for (let i = 0; i < arr.length; i++) {
                            for (let j = i + 1; j < arr.length; j++) {
                                results.push(
                                    {
                                        coin: coin,
                                        spread: arr[i][0] / arr[j][0],
                                        market2: {
                                            name: arr[i][1],
                                            last: arr[i][0],
                                            volume: arr[i][2]
                                        },
                                        market1: {
                                            name: arr[j][1],
                                            last: arr[j][0],
                                            volume: arr[i][2]
                                        }

                                    },
                                    {//TODO, shouldnt have to create duplicate object for same markets
                                        coin: coin,
                                        spread: arr[j][0] / arr[i][0],
                                        market2: {
                                            name: arr[j][1],
                                            last: arr[j][0],
                                            volume: arr[i][2]
                                        },
                                        market1: {
                                            name: arr[i][1],
                                            last: arr[i][0],
                                            volume: arr[i][2]
                                        }

                                    }
                                );

                                // db.insert({
                                //     coin: coin,
                                //     lastSpread: arr[i][0] / arr[j][0],
                                //     market1: {
                                //         name: arr[i][1],
                                //         last: arr[i][0]
                                //     },
                                //     market2: {
                                //         name: arr[j][1],
                                //         last: arr[j][0]
                                //     }
                                // })

                            }
                        }

                    }
                }
                results.sort(function (a, b) {
                    return a.spread - b.spread;
                });
                console.log('Finishing function...');
                resolve();
            }
        })
    }

    await loopData();


    io.emit('results', results);
}




(async function main() {
    let arrayOfRequests = [];






    for (let i = 0; i < markets.length; i++) {
        arrayOfRequests.push(getMarketData(markets[i], coin_prices));
    }

    await Promise.all(arrayOfRequests.map(p => p.catch(e => e)))

        .then(results => computePrices(coin_prices))

        .catch(e => console.log(e));

        let ordersSell = [];
        let ordersBuy = [];

        let whichOne = results[0];
        let coin = whichOne.coin;


        console.log(whichOne.market1.name + ":" + whichOne.market2.name);
        console.log(coin);
        switch(whichOne.market1.name) {
            case "bittrex":
              ordersBuy = await (ccxtBittrex.fetchOrderBook('ETH-' + coin));
            break;

            case "poloniex":
              ordersBuy = await (ccxtPolo.fetchOrderBook('ETH_' + coin));
            break;

            case "liqui":
              ordersBuy = await (ccxtLiqui.fetchOrderBook('ETH'));
            break;

            case "binance":
              ordersBuy = await (ccxtBinance.fetchOrderBook(coin + "/ETH"));
            break;

            case "cryptopia":
              ordersBuy = await (ccxtCryptopia.fetchOrderBook(coin + '-ETH'));
            break;

            case "etherdelta":
              ordersBuy = getDeltaOrders(coin);
/*
              var count = 0;
              while (count < 5){
                gulp.src("docs/grid.xml").pipe(xmlTransformer([
                  { path: '//table//data//row//column1', text: ordersBuy.buys[count].price },
                  { path: '//table//data//row//column2', text: ordersBuy.buys[count].ethAvailableVolumeBase },
                  { path: '//table//data//row//column3', text: ordersBuy.sell[count].price },
                  { path: '//table//data//row//column4', text: ordersBuy.sell[count].ethAvailableVolumeBase }
                ])).pipe(gulp.dest("docs/"));
                count++;
              }
*/
            break;

            default:
              console.log("Uknown Market: ", whichOne.market1.name);
          }

          switch(whichOne.market2.name) {
              case "bittrex":
              console.log("======================================");
              console.log("Bittrex");
                ordersSell = await (ccxtBittrex.fetchOrderBook('ETH-' + "OMG"));
                //console.log(ordersSell.asks[0]);
                var count = 0;
                while (count < 5){
                  //console.log(ordersSell[0][0] + " at price: " + ordersSell[0][0]);
                  count++;
                }
              console.log("======================================");
              break;

              case "poloniex":
                ordersSell = await (ccxtPolo.fetchOrderBook('ETH-' + coin));
              break;

              case "liqui":
                ordersSell = await (ccxtLiqui.fetchOrderBook('ETH-' + coin));
              break;

              case "binance":
                ordersSell = await (ccxtBinance.fetchOrderBook(coin + "/ETH"));
                var count = 0;
                console.log("======================================");
                console.log("Binance");
                var count = 0;
                while (count < 5){
                  console.log(ordersSell.bids[count].ethAvailableVolumeBase + " at price: " + ordersSell.bids[count].price);
                  count++;
                }
                console.log("======================================");

              break;

              case "cryptopia":
                ordersSell = await (ccxtCryptopia.fetchOrderBook(coin + '-ETH'));
              break;

              case "etherdelta":
                ordersSell = getDeltaOrders(coin);
/*
                while (count < 5){
                  gulp.src("docs/grid.xml").pipe(xmlTransformer([
                    { path: '//table//data//row//column5', text: ordersSell.buys[count].price },
                    { path: '//table//data//row//column6', text: ordersSell.buys[count].ethAvailableVolumeBase },
                    { path: '//table//data//row//column7', text: ordersSell.sell[count].price },
                    { path: '//table//data//row//column8', text: ordersSell.sell[count].ethAvailableVolumeBase }
                  ])).pipe(gulp.dest("docs/"));
                  count++;
                }
*/
              break;

              default:
                  console.log("Uknown Market: ", whichOne.market2.name);
            }

        //let orders = await (ccxtBittrex.fetchOrderBook('BTC-DOGE'));
        //let testGrid = $('#tablecontent').html();
        //let templateGrid = Handlebars.compile(testGrid);
        console.log("Emitting Results...");



        /*
        console.log("Can Buy");
        console.log("======================================");
        console.log("Price:" + ordersBuy.asks[0][0].toFixed(8).toString() + ", Volume:" + ordersBuy.asks[0][1]);
        console.log("Price:" + ordersBuy.asks[1][0].toFixed(8).toString() + ", Volume:" + ordersBuy.asks[1][1]);
        console.log("Price:" + ordersBuy.asks[2][0].toFixed(8).toString() + ", Volume:" + ordersBuy.asks[2][1]);
        console.log("Price:" + ordersBuy.asks[3][0].toFixed(8).toString() + ", Volume:" + ordersBuy.asks[3][1]);

        console.log("Can Sell");
        console.log("======================================");
        console.log("Price:" + ordersSell.bids[0][0].toFixed(8).toString() + ", Volume:" + ordersSell.bids[0][1]);
        console.log("Price:" + ordersSell.bids[1][0].toFixed(8).toString() + ", Volume:" + ordersSell.bids[1][1]);
        console.log("Price:" + ordersSell.bids[2][0].toFixed(8).toString() + ", Volume:" + ordersSell.bids[2][1]);
        console.log("Price:" + ordersSell.bids[3][0].toFixed(8).toString() + ", Volume:" + ordersSell.bids[3][1]);
        */
    setTimeout(main, 10000);
})();
